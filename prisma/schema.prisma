generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// MULTI-TENANT CORE MODELS
// ============================================================================

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  subdomain String?  @unique // For future multi-tenant routing (e.g., company.smartdesk.com)
  isActive  Boolean  @default(true) // Soft deletion / suspension capability
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  providers Provider[]
  services  Service[]
  bookings  Booking[]
  settings  CompanySettings?

  @@map("companies")
}

model CompanySettings {
  id           String   @id @default(cuid())
  companyId    String   @unique
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Localisation
  timeZone     String   @default("Europe/London")
  currency     String   @default("GBP")
  dateFormat   String   @default("dd/MM/yyyy") // UK date format
  
  // Branding
  brandColour  String   @default("#000000")
  logoUrl      String?  // For future branding
  
  // Booking Configuration
  bufferTime   Int      @default(0) // Minutes between appointments
  minAdvance   Int      @default(60) // Minimum minutes in advance for booking
  maxAdvance   Int      @default(10080) // Maximum minutes in advance (default: 1 week)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("company_settings")
}

// ============================================================================
// USER MANAGEMENT (Admin/Provider Authentication)
// ============================================================================

model User {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  email     String   
  password  String   // Bcrypt hashed
  name      String
  role      UserRole @default(PROVIDER)
  isActive  Boolean  @default(true) // Allow account suspension
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  @@unique([companyId, email]) // Email unique per company (multi-tenant)
  @@index([companyId])
  @@index([email]) // Fast lookup during login
  @@map("users")
}

enum UserRole {
  ADMIN     // Full access to company settings
  PROVIDER  // Can view their own schedule and bookings
}

// ============================================================================
// CLIENT (CUSTOMER) MODEL - No company_id (shared across tenants)
// ============================================================================

model Client {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  
  // Optional password for future client portal
  password  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  bookings  Booking[]

  @@index([email]) // Fast lookup during booking
  @@map("clients")
}

// ============================================================================
// PROVIDER (STAFF) MODEL
// ============================================================================

model Provider {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name      String
  email     String
  bio       String?  // Provider description for client-facing pages
  imageUrl  String?  // Provider photo
  isActive  Boolean  @default(true) // Can deactivate without deleting
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  services      ServiceProvider[]
  workingHours  WorkingHours[]
  bookings      Booking[]

  @@unique([companyId, email]) // Email unique per company
  @@index([companyId])
  @@index([companyId, isActive]) // Fast filtering of active providers
  @@map("providers")
}

// ============================================================================
// SERVICE MODEL
// ============================================================================

model Service {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  duration    Int      // Duration in minutes
  price       Decimal  @db.Decimal(10, 2)
  
  // Service visibility and availability
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(true) // Show on public booking page
  
  // Display order
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  providers   ServiceProvider[]
  bookings    Booking[]

  @@index([companyId])
  @@index([companyId, isActive, isPublic]) // Fast filtering for public listing
  @@map("services")
}

// ============================================================================
// SERVICE-PROVIDER JUNCTION (Many-to-Many)
// ============================================================================

model ServiceProvider {
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  providerId String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())

  @@id([serviceId, providerId])
  @@index([providerId]) // Fast lookup: "which services does this provider offer?"
  @@index([serviceId])  // Fast lookup: "which providers offer this service?"
  @@map("service_providers")
}

// ============================================================================
// WORKING HOURS (MINIMAL ROTA) - Recurring Weekly Schedule
// ============================================================================

model WorkingHours {
  id         String   @id @default(cuid())
  providerId String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  dayOfWeek  Int      // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime  String   // Format: "HH:mm" (e.g., "09:00")
  endTime    String   // Format: "HH:mm" (e.g., "17:00")
  
  // Allow breaking hours (e.g., lunch break)
  // Provider can have multiple entries per day
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([providerId, dayOfWeek]) // Critical for availability queries
  @@map("working_hours")
}

// ============================================================================
// BOOKING MODEL - The Core Transaction
// ============================================================================

model Booking {
  id         String        @id @default(cuid())
  companyId  String
  company    Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  serviceId  String
  service    Service       @relation(fields: [serviceId], references: [id])
  
  providerId String
  provider   Provider      @relation(fields: [providerId], references: [id])
  
  clientId   String
  client     Client        @relation(fields: [clientId], references: [id])
  
  // Timing
  startTime  DateTime
  endTime    DateTime
  
  // Status tracking
  status     BookingStatus @default(PENDING)
  
  // Payment tracking
  paymentId  String?       @unique // Stripe Payment Intent ID
  amount     Decimal       @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  
  // Cancellation tracking
  cancelledAt DateTime?
  cancelledBy String?      // "client" or "provider" or "admin"
  cancellationReason String?
  
  // Additional notes
  clientNotes String?      // Notes from client during booking
  providerNotes String?    // Internal notes from provider/admin
  
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Indexes for performance
  @@index([companyId])
  @@index([providerId, startTime]) // Critical: availability calculation
  @@index([clientId])
  @@index([status])
  @@index([startTime]) // For chronological queries
  @@map("bookings")
}

enum BookingStatus {
  PENDING    // Awaiting payment confirmation
  CONFIRMED  // Payment successful, booking confirmed
  CANCELLED  // Booking cancelled
  COMPLETED  // Service delivered
  NO_SHOW    // Client didn't show up
}

enum PaymentStatus {
  PENDING           // Payment not yet processed
  PROCESSING        // Payment in progress
  SUCCEEDED         // Payment successful
  FAILED            // Payment failed
  REFUNDED          // Payment refunded
  PARTIALLY_REFUNDED // Partial refund issued
}